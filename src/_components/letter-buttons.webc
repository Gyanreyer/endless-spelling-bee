<div webc:root="override" class="letter-buttons">
  <script webc:type="js" webc:is="template">
    // Note that the buttons are not tabbable because they are really awkward to navigate with
    // a keyboard. Instead, keyboard users can directly type into the input field.
    /* html */ `
      <button class="outer-letter" tabindex="-1" type="button"></button>
      <button class="outer-letter" tabindex="-1" type="button"></button>
      <button class="outer-letter" tabindex="-1" type="button"></button>
      <button class="outer-letter" tabindex="-1" type="button"></button>
      <button class="outer-letter" tabindex="-1" type="button"></button>
      <button class="outer-letter" tabindex="-1" type="button"></button>
      <button class="center-letter" tabindex="-1" type="button"></button>
    `;
  </script>
</div>
<script webc:bucket="defer">
  const letterButtons = document.querySelectorAll(".letter-buttons button");
  const inputDisplay = document.getElementById("letter-input");

  for (button of letterButtons) {
    button.addEventListener("click", (e) => {
      const character = e.currentTarget.textContent;
      inputDisplay.value += character;
    });
  }
</script>
<style webc:scoped>
  :host {
    width: 25%;
    max-width: 8rem;
    aspect-ratio: 1.15;

    padding: 13% 11%;
    margin: 4rem auto;
  }

  button {
    clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);
    background: #e6e6e6;
    font-weight: 600;
    font-size: 1.4rem;
    position: absolute;
    border: none;
    text-transform: uppercase;

    width: inherit;
    max-width: inherit;
    aspect-ratio: inherit;

    --translate-x: 0;
    --translate-y: 0;
    --scale: 0.925;
    transform: translate(var(--translate-x), var(--translate-y))
      scale(var(--scale));
  }

  .center-letter {
    --color-1: #1644ff;
    --color-1: oklch(51% 0.285 265);
    --color-2: #e100d2;
    --color-2: oklch(63% 0.29 332);
    --color-3: #fdd000;
    --color-3: oklch(87% 0.2 93);
    background-image: linear-gradient(
      43deg,
      var(--color-1) 0%,
      var(--color-2) 36%,
      var(--color-3) 87%
    );
    color: white;
  }

  .outer-letter:nth-child(1) {
    --translate-y: -100%;
  }

  .outer-letter:nth-child(2) {
    --translate-x: -75%;
    --translate-y: -50%;
  }

  .outer-letter:nth-child(3) {
    --translate-x: 75%;
    --translate-y: -50%;
  }

  .outer-letter:nth-child(4) {
    --translate-x: -75%;
    --translate-y: 50%;
  }

  .outer-letter:nth-child(5) {
    --translate-x: 75%;
    --translate-y: 50%;
  }

  .outer-letter:nth-child(6) {
    --translate-y: 100%;
  }
</style>
<script>
  function shuffleOuterLetters() {
    const outerLetterButtons = document.querySelectorAll(".outer-letter");

    for (let i = 0, len = outerLetterButtons.length; i < len; ++i) {
      // Iterate over each button and randomly swap its letter with one of the
      // other buttons to achieve a simple shuffle effect.
      const swapIndex = Math.floor(Math.random() * len);
      const swapLetter = outerLetterButtons[swapIndex].textContent;
      outerLetterButtons[swapIndex].textContent =
        outerLetterButtons[i].textContent;
      outerLetterButtons[i].textContent = swapLetter;
    }
  }

  function onLetterSetChanged() {
    const centerLetterButton = document.querySelector(".center-letter");
    const outerLetterButtons = document.querySelectorAll(".outer-letter");

    centerLetterButton.textContent = window.currentCenterLetter;

    const outerLetters = window.currentLetterSet.replace(
      window.currentCenterLetter,
      ""
    );

    for (let i = 0, len = outerLetters.length; i < len; ++i) {
      outerLetterButtons[i].textContent = outerLetters[i];
    }

    // Shuffle the outer letters so the initial order is not always the same.
    shuffleOuterLetters();
  }

  document.addEventListener("letter-set-changed", onLetterSetChanged);
</script>
