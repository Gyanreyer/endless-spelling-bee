<form webc:root="override" id="letter-form">
  <guess-input name="guess"></guess-input>
  <letter-buttons></letter-buttons>
  <button type="reset">Delete</button>
  <button type="button" onclick="shuffleOuterLetters()">Shuffle</button>
  <button type="submit">Enter</button>
</form>
<script>
  function initializeLetterSet(letterSet, centerLetter) {
    if (!letterSet.includes(centerLetter)) {
      console.error(
        `Center letter ${centerLetter} is not in letter set ${letterSet}`
      );
      return getNewLetterSet();
    }

    if (!window.letterSets.includes(letterSet)) {
      console.error(
        `Letter set ${letterSet} is not in list of valid letter sets`
      );
      return getNewLetterSet();
    }

    window.currentLetterSet = letterSet;
    window.currentCenterLetter = centerLetter;

    window.validWords = new Map();
    window.totalPossibleScore = 0;
    window.currentScore = Number(localStorage.getItem(`score-${letterSet}`));
    if (window.currentScore === null) {
      window.currentScore = 0;
      localStorage.setItem(`score-${letterSet}`, 0);
    }

    let guessedWords = JSON.parse(
      localStorage.getItem(`guessedWords-${letterSet}`)
    );
    if (guessedWords === null) {
      guessedWords = [];
      localStorage.setItem(`guessedWords-${letterSet}`, JSON.stringify([]));
    }
    window.guessedWords = new Set();
    for (let i = 0, len = guessedWords.length; i < len; ++i) {
      window.guessedWords.add(guessedWords[i]);
    }

    const letterSetLookup = new Set();
    for (let i = 0, len = letterSet.length; i < len; ++i) {
      letterSetLookup.add(letterSet[i]);
    }

    const allWords = window.allWords;
    for (let i = 0, numWords = allWords.length; i < numWords; ++i) {
      const word = allWords[i];
      if (word.length < 3) continue;

      let hasCenterLetter = false;
      let hasBadLetter = false;
      let isPanagram = false;

      const visitedLetters = new Set();

      for (let j = 0, numLetters = word.length; j < numLetters; ++j) {
        const letter = word[j];

        if (letter === centerLetter) {
          hasCenterLetter = true;
        }

        if (!letterSetLookup.has(letter)) {
          hasBadLetter = true;
          break;
        }

        if (!visitedLetters.has(letter)) {
          visitedLetters.add(letter);
        }
      }

      if (!hasCenterLetter || hasBadLetter) continue;

      if (visitedLetters.size === letterSet.length) {
        isPanagram = true;
      }

      // 4-letter words are worth 1 point. Longer words are worth their length, so a 5-letter word = 5pts, 6-letter = 6pts, etc.
      let wordScoreValue = word.length <= 4 ? 1 : word.length;
      // Panagrams are worth an additional 7 points
      if (isPanagram) {
        wordScoreValue += 7;
      }

      window.totalPossibleScore += wordScoreValue;
      window.validWords.set(word, wordScoreValue);
    }

    localStorage.setItem("currentLetterSet", letterSet);
    localStorage.setItem("currentCenterLetter", centerLetter);

    // Apply the letter set to the URL's query params so sets are sharable
    const searchParams = new URLSearchParams();
    searchParams.set("letters", letterSet);
    searchParams.set("center", centerLetter);

    window.history.replaceState(null, null, `?${searchParams}`);

    const event = new Event("letter-set-changed");
    document.dispatchEvent(event);
  }

  // Randomly picks a new letter set to use
  function getNewLetterSet() {
    const letterSet =
      letterSets[Math.floor(Math.random() * window.letterSets.length)];
    const centerLetter =
      letterSet[Math.floor(Math.random() * letterSet.length)];

    initializeLetterSet(letterSet, centerLetter);
  }

  async function setUpInitialLetterSet() {
    try {
      const [letterSets, words] = await Promise.all([
        fetch("/words/en/letterSets.json").then((res) => res.json()),
        fetch("/words/en/words.json").then((res) => res.json()),
      ]);
      window.letterSets = letterSets;
      window.allWords = words;
    } catch (err) {
      console.error(
        "Failed to load word sets for your language. Please try refreshing.",
        err
      );
      return;
    }

    const searchParams = new URLSearchParams(window.location.search);
    let letters = searchParams.get("letters");
    let center = searchParams.get("center");

    if (!letters || !center) {
      // If we don't have a letter set in the URL query params, check local storage
      letters = localStorage.getItem("currentLetterSet");
      center = localStorage.getItem("currentCenterLetter");
    }

    if (!letters || !center) {
      // If we couldn't find a letter set in local storage, pick a new random one
      getNewLetterSet();
    } else {
      initializeLetterSet(letters, center);
    }
  }

  setUpInitialLetterSet();
</script>
<script webc:bucket="defer">
  const formElement = document.getElementById("letter-form");

  formElement.addEventListener("submit", (e) => {
    e.preventDefault();

    const guessInput = e.currentTarget.guess;
    const guess = guessInput.value.toLowerCase();
    guessInput.value = "";

    if (guess.length < 3) {
      alert("Your guess must be at least 3 letters long.");
      return;
    }

    if (!guess.includes(window.currentCenterLetter)) {
      alert("Your guess must contain the center letter.");
      return;
    }

    for (let i = 0, len = guess.length; i < len; ++i) {
      if (!window.currentLetterSet.includes(guess[i])) {
        alert("Your guess contains letters that are not in the letter set.");
        return;
      }
    }

    if (!window.validWords.has(guess)) {
      alert("Your guess is not a valid word.");
      return;
    }

    if (window.guessedWords.has(guess)) {
      alert("You have already guessed that word.");
      return;
    }

    alert("Your guess is worth " + window.validWords.get(guess) + " points!");
    window.guessedWords.add(guess);
    localStorage.setItem(
      `guessedWords-${window.currentLetterSet}`,
      JSON.stringify(Array.from(window.guessedWords))
    );
    window.currentScore += window.validWords.get(guess);
    localStorage.setItem(
      `score-${window.currentLetterSet}`,
      window.currentScore
    );

    console.log("Current score: " + window.currentScore);
    console.log("Total possible score: " + window.totalPossibleScore);
    console.log("Guessed words: " + Array.from(window.guessedWords));
  });
</script>
