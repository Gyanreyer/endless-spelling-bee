<form>
  <div class="guess-input-wrapper">
    <input
      type="text"
      name="word"
      required
      minlength="4"
      maxlength="25"
      autocomplete="off"
    />
    <div id="guess-display" inert></div>
  </div>
  <letter-buttons></letter-buttons>
  <div class="action-buttons">
    <button type="button" id="delete-button">Delete</button>
    <button
      type="button"
      id="shuffle-button"
      aria-label="Shuffle the outer letters"
    >
      <shuffle-icon width="2rem" height="2rem"></shuffle-icon>
    </button>
    <button type="submit">Enter</button>
  </div>
</form>
<style>
  word-form form {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  word-form .guess-input-wrapper {
    display: inline-block;
    position: relative;
    margin: 0 auto 1rem;
  }

  word-form :is(input, #guess-display) {
    font-size: 3rem;
    text-transform: uppercase;
    text-align: center;
    height: 1em;
    line-height: 1em;
  }

  word-form input {
    color: transparent;
    caret-color: var(--yellow);
    background: none;
    border: none;

    position: absolute;
    display: block;
    margin: 0 auto;
    top: 0;
    left: 0;
    width: 100%;
  }

  word-form input:focus {
    outline: none;
  }

  word-form #guess-display {
    position: relative;
    pointer-events: none;
    min-width: 3ch;
  }

  word-form #guess-display::after {
    content: "";
    position: absolute;
    top: calc(100% + 0.2rem);
    left: 0;
    width: 100%;
    height: 1px;
    background: var(--black);
  }

  word-form #guess-display::highlight(center-letter) {
    color: var(--yellow);
  }

  word-form input:focus + #guess-display::after {
    background-color: var(--yellow);
    height: 2px;
  }

  word-form .action-buttons {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
  }
</style>
<script>
  class WordForm extends HTMLElement {
    static invalidLettersRegex = new RegExp(
      `[^${
        window.__GAME_DATA__.today.centerLetter
      }${window.__GAME_DATA__.today.outerLetters.join("")}]`,
      "g"
    );

    /**
     * @type {HTMLInputElement}
     */
    inputElement;
    /**
     * @type {HTMLDivElement}
     */
    guessDisplayElement;

    guessedWordSet = new Set(window.__GAME_DATA__.todayGuesses);

    constructor() {
      super();

      const shadowRoot = this.attachShadow({ mode: "open" });
      shadowRoot.appendChild(document.createElement("slot"));
    }

    connectedCallback() {
      const formElement = this.querySelector("form");
      formElement.addEventListener("submit", this.onSubmit.bind(this));

      this.inputElement = formElement.querySelector("input");
      this.inputElement.addEventListener("input", this.onInput.bind(this));

      document.addEventListener(
        "osb:letter-click",
        this.onLetterClick.bind(this)
      );

      this.guessDisplayElement = this.querySelector("#guess-display");
    }

    /**
     * @param {SubmitEvent} event
     */
    onSubmit(event) {
      event.preventDefault();

      const formElement = event.currentTarget;

      const formData = new FormData(formElement);
      const word = formData.get("word");

      // Clear the input
      this.updateInputValue("");

      if (!word || typeof word !== "string") {
        return;
      }

      document.dispatchEvent(
        new CustomEvent("osb:guess", {
          detail: {
            word,
          },
        })
      );
    }

    /**
     * @param {Event} event
     */
    onInput(event) {
      // Strip all invalid letters from the input
      const sanitizedValue = this.inputElement.value
        .toLowerCase()
        .replaceAll(WordForm.invalidLettersRegex, "");
      this.updateInputValue(sanitizedValue);
    }

    /**
     * @param {CustomEvent<{
     *  letter: string;
     * }>} event
     */
    onLetterClick(event) {
      this.updateInputValue(this.inputElement.value + event.detail.letter);
    }

    /**
     * @param {string} value
     */
    updateInputValue(value) {
      this.inputElement.value = value;

      const newTextNode = document.createTextNode(value);
      this.guessDisplayElement.replaceChildren(newTextNode);

      if (!CSS.highlights) {
        return;
      }

      const centerLetter = window.__GAME_DATA__.today.centerLetter;
      /**
       * @type {Range}
       */
      const centerLetterRanges = [];

      for (let i = 0, valueLen = value.length; i < valueLen; ++i) {
        if (value[i] === centerLetter) {
          const range = new Range();
          range.setStart(newTextNode, i);
          range.setEnd(newTextNode, i + 1);
          centerLetterRanges.push(range);
        }
      }

      if (centerLetterRanges.length > 0) {
        CSS.highlights.set(
          "center-letter",
          new Highlight(...centerLetterRanges)
        );
      } else {
        CSS.highlights.delete("center-letter");
      }
    }
  }

  window.customElements.define("word-form", WordForm);
</script>
